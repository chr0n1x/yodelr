// Code generated by go-bindata.
// sources:
// templates/bindata.go
// templates/reminder.plist
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func templatesBindataGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesBindataGo,
		"templates/bindata.go",
	)
}

func templatesBindataGo() (*asset, error) {
	bytes, err := templatesBindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1451282395, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesReminderPlist = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\x4d\x8f\xda\x30\x10\x86\xef\xfc\x0a\xd7\xda\x63\x63\xb7\xb7\x6a\x65\xb2\x5a\x3e\x2a\x21\xa5\x6d\x24\xc2\xa1\x47\x43\x86\x60\x35\x71\xa2\x89\x81\x46\x51\xfe\x7b\x27\x01\x4a\x02\x2a\x94\x0b\xfe\x78\xde\x67\xc6\x76\xd4\xdb\xef\x2c\x65\x07\xc0\xd2\xe4\x76\xcc\x3f\x8b\x4f\x9c\x81\xdd\xe4\xb1\xb1\xc9\x98\xaf\xa2\xaf\xde\x17\xfe\xe6\x8f\xd4\x87\xd9\x8f\x69\xf4\x33\x9c\xb3\x22\x35\xa5\x63\xe1\x6a\x12\x2c\xa6\x8c\x7b\x52\xbe\x17\x45\x0a\x52\xce\xa2\x19\x0b\x83\xc5\x32\x62\xe4\x90\x72\xfe\x9d\x33\xbe\x73\xae\x78\x95\xf2\x78\x3c\x0a\xdd\x52\x62\x93\x67\x2d\x58\xca\x10\xf3\x02\xd0\x55\x01\xc9\x3c\x0a\x88\xd8\xc5\x9c\xca\x9c\xec\x83\x76\xfc\x11\xa3\x9f\x8a\xcd\xc6\x9d\x86\xdd\xf4\x17\x54\x7e\xa0\xd7\x90\x2a\xd9\x0e\xaf\x1b\xa5\x43\x6a\xdd\xa7\x4a\xa2\xca\x63\x48\x51\x20\x64\xc6\xc6\x80\x4a\x9e\xf7\x86\x16\x6a\x25\x41\x9d\xbd\x63\xb2\xcf\xc0\xba\xf2\x56\xa8\x11\x75\x6f\xde\x2f\x52\xd7\x62\x62\x6c\xa8\xdd\xae\x69\xee\xed\x7d\xd2\xe6\xce\x6c\xab\xc7\x0c\xd9\xbe\x41\x59\xea\x04\x9e\xd9\x88\x8c\x8c\x4b\xff\x87\x5b\xee\xd7\xee\x11\x5a\xd7\x66\xcb\x44\x48\xeb\x4d\x33\xd8\xb8\x5a\x3c\xaf\xa0\xbf\x7f\xc5\xc1\xc6\xbd\xa4\x92\x37\xd7\xd5\x5d\xf1\xd2\x69\x74\x53\x9d\x12\xab\x71\x61\x1d\xe0\x41\xdf\x3d\xdc\xf0\x81\x4f\x72\xd4\x36\x01\xf6\x42\xe0\x47\xf6\x42\x19\xf6\x3a\x66\xe2\x22\xb8\x6b\xf8\x5c\xad\xae\xdb\x40\x7b\xe0\x41\x81\xbf\x8c\xa1\x7c\x02\xd8\x72\x9d\x45\xc9\xcb\xca\x93\xa3\x5d\x3b\xbc\x8c\x95\xec\x3e\x58\x7f\xf4\x27\x00\x00\xff\xff\x6a\x12\xde\xb6\x47\x03\x00\x00")

func templatesReminderPlistBytes() ([]byte, error) {
	return bindataRead(
		_templatesReminderPlist,
		"templates/reminder.plist",
	)
}

func templatesReminderPlist() (*asset, error) {
	bytes, err := templatesReminderPlistBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/reminder.plist", size: 839, mode: os.FileMode(420), modTime: time.Unix(1451280456, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/bindata.go": templatesBindataGo,
	"templates/reminder.plist": templatesReminderPlist,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"bindata.go": &bintree{templatesBindataGo, map[string]*bintree{}},
		"reminder.plist": &bintree{templatesReminderPlist, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

